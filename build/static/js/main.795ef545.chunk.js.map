{"version":3,"sources":["tracks.js","App.js","serviceWorker.js","index.js"],"names":["drumsList","chordsList","voxList","shuffleIsLooping","App","useState","isLoaded","setLoaded","isPlaying","setPlaying","chords","useRef","drums","vox","transport","current","Tone","Transport","useEffect","loop","bpm","value","loopStart","loopEnd","schedule","console","log","shuffleOnce","Player","url","pickRandomTrack","toMaster","sync","start","Buffer","on","newChords","newDrums","newVox","load","tracks","getRandomInt","length","max","Math","floor","random","disabled","onClick","stop","mute","round","progress","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.795ef545.chunk.js","sourcesContent":["export const drumsList = [\"brakence_DNB.wav\", \"fortuneswan_DNB.wav\", \"HOLIDAYKISS_DNB.wav\", \"jack cates_ DNB.wav\", \"Moon_ DNB.wav\", \"Moore Kismet_DNB.wav\", \"VALENTINE_DNB.wav\", \"VeraMuch_DNB.wav\"]\r\nexport const chordsList = [\"brakence_Melodics.wav\", \"fortuneswan_Melodics.wav\", \"HOLIDAYKISS_Melodics.wav\", \"jack cates_ Melodics.wav\", \"MagLo_Melodic.wav\", \"Moon_ MELODICS.wav\", \"VALENTINE_Melodics.wav\", \"VeraMuch_Melodics.wav\"]\r\nexport const voxList = [\"brakence_Vox.wav\", \"fortuneswan_Vox.wav\", \"HOLIDAYKISS_Vox.wav\", \"jack cates_ Vox.wav\", \"Moon_ VOX.wav\", \"VALENTINE_Vox.wav\", \"VeraMuch_Vox.wav\"]","import React, { useState, useRef, useEffect } from 'react';\r\nimport './App.css';\r\nimport Tone from 'tone';\r\nimport { chordsList, drumsList, voxList } from './tracks.js';\r\n\r\nlet shuffleIsLooping = false;\r\n\r\nconst App = () => {\r\n  const [isLoaded, setLoaded] = useState(false);\r\n  const [isPlaying, setPlaying] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const chords = useRef(null);\r\n  const drums = useRef(null);\r\n  const vox = useRef(null);\r\n  const transport = useRef(null);\r\n  transport.current = Tone.Transport;\r\n\r\n  useEffect(() => {\r\n    transport.current.loop = true;\r\n    transport.current.bpm.value = 150;\r\n    transport.current.loopStart = '0m';\r\n    transport.current.loopEnd = '8m';\r\n    transport.current.schedule(() => {\r\n      if (shuffleIsLooping) {\r\n        console.log(`Auto shuffling...`);\r\n        shuffleOnce();\r\n      }\r\n    }, '7m');\r\n\r\n    // new Tone.Loop(() => {\r\n    //    setProgress(Math.round(transport.current.progress*100));\r\n    // }, \"4n\").start();\r\n\r\n    chords.current = new Tone.Player({\r\n      url: pickRandomTrack(chordsList),\r\n      loop: true,\r\n    })\r\n      .toMaster()\r\n      .sync()\r\n      .start();\r\n\r\n    drums.current = new Tone.Player({\r\n      url: pickRandomTrack(drumsList),\r\n      loop: true,\r\n    })\r\n      .toMaster()\r\n      .sync()\r\n      .start();\r\n\r\n    vox.current = new Tone.Player({\r\n      url: pickRandomTrack(voxList),\r\n      loop: true,\r\n    })\r\n      .toMaster()\r\n      .sync()\r\n      .start();\r\n\r\n    Tone.Buffer.on('load', () => {\r\n      setLoaded(true);\r\n    });\r\n  }, []);\r\n\r\n  const togglePlay = () => {\r\n    if (isPlaying) {\r\n      transport.current.stop();\r\n    } else {\r\n      transport.current.start();\r\n    }\r\n    setPlaying(!isPlaying);\r\n  };\r\n\r\n  const shuffleOnce = () => {\r\n    const newChords = pickRandomTrack(chordsList);\r\n    const newDrums = pickRandomTrack(drumsList);\r\n    const newVox = pickRandomTrack(voxList);\r\n\r\n    console.log(`Shuffling...`);\r\n    console.log(`Queued: ${newChords}`);\r\n    console.log(`Queued: ${newDrums}`);\r\n    console.log(`Queued: ${newVox}`);\r\n\r\n    chords.current.load(newChords);\r\n    drums.current.load(newDrums);\r\n    vox.current.load(newVox);\r\n  };\r\n\r\n  const toggleShuffle = () => {\r\n    shuffleIsLooping = !shuffleIsLooping;\r\n    shuffleIsLooping ? console.log(`Shuffle on`) : console.log(`Shuffle off`);\r\n  };\r\n\r\n  const pickRandomTrack = (tracks) => {\r\n    return './audio/' + tracks[getRandomInt(tracks.length)];\r\n  };\r\n\r\n  const getRandomInt = (max) => {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n  };\r\n\r\n  const muteChords = () => {\r\n    chords.current.mute = !chords.current.mute;\r\n  };\r\n\r\n  const muteDrums = () => {\r\n    drums.current.mute = !drums.current.mute;\r\n  };\r\n\r\n  const muteVox = () => {\r\n    vox.current.mute = !vox.current.mute;\r\n  };\r\n\r\n  const printProg = () => {\r\n    console.log(Math.round(transport.current.progress * 100));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button disabled={!isLoaded} onClick={togglePlay}>\r\n        toggle play\r\n      </button>\r\n      <button disabled={!isLoaded} onClick={shuffleOnce}>\r\n        shuffle once\r\n      </button>\r\n      <button disabled={!isLoaded} onClick={toggleShuffle}>\r\n        shuffle toggle\r\n      </button>\r\n      <button disabled={!isLoaded} onClick={muteChords}>\r\n        mute chords\r\n      </button>\r\n      <button disabled={!isLoaded} onClick={muteDrums}>\r\n        mute drums\r\n      </button>\r\n      <button disabled={!isLoaded} onClick={muteVox}>\r\n        mute vox\r\n      </button>\r\n      <button onClick={printProg}>show prog</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n//mute button and lock button\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}